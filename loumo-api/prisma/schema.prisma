// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("MAIN_DATABASE_URL")
}

model User {
  id                      Int       @id @default(autoincrement())
  email                   String    @unique
  name                    String
  password                String
  passwordResetOtp        String?
  passwordResetOtpExpires DateTime?
  tel                     String?
  fidelity                Int

  verified               Boolean   @default(false)
  verificationOtp        String?
  verificationOtpExpires DateTime?

  active   Boolean @default(true)
  imageUrl String?

  role          Role           @relation(fields: [roleId], references: [id])
  roleId        Int
  addresses     Address[]
  notifications Notification[]
  logs          Log[]
  orders        Order[]
  favorite      Product[]
  agent         Agent?

  lastLogin DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Address {
  id          Int      @id @default(autoincrement())
  local       String
  street      String
  description String?
  published   Boolean  @default(false)
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  zone        Zone?    @relation(fields: [zoneId], references: [id])
  zoneId      Int?
  shops       Shop[]
  orders      Order[]
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String
  permissions Permission[]
  user        User[]
}

model Permission {
  id     Int    @id @default(autoincrement())
  action String @unique
  roles  Role[]
}

model Log {
  id          Int       @id @default(autoincrement())
  action      String
  description String
  createdAt   DateTime? @default(now())
  user        User?     @relation(fields: [userId], references: [id])
  userId      Int?
}

model Notification {
  id          Int      @id @default(autoincrement())
  action      String
  description String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
}

model Zone {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  price       Int
  status      String
  addresses   Address[]
  agents      Agent[]
}

model Shop {
  id             Int      @id @default(autoincrement())
  name           String
  address        Address? @relation(fields: [addressId], references: [id])
  addressId      Int?
  productVariant Stock[]
}

model Stock {
  id               Int            @id @default(autoincrement())
  threshold        Int            @default(0)
  quantity         Int
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
  productVariantId Int
  shop             Shop           @relation(fields: [shopId], references: [id])
  shopId           Int
  promotion        Promotion?     @relation(fields: [promotionId], references: [id])
  promotionId      Int?
  restockDate      DateTime       @default(now())
}

model Promotion {
  id          Int       @id @default(autoincrement())
  code        String
  percentage  Int
  amount      Int       @default(0)
  expireAt    DateTime?
  description String?
  status      String
  usedCount   Int       @default(0)
  maxUses     Int       @default(1)
  startAt     DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  createdAt   DateTime  @default(now())
  stock       Stock[]
}

model ProductVariant {
  id         Int         @id @default(autoincrement())
  name       String
  imgUrl     String?
  weight     Int
  status     Boolean
  price      Int         @default(0)
  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  Int
  orderItems OrderItem[]
  stock      Stock[]
  createdAt  DateTime    @default(now())
}

model Product {
  id          Int              @id @default(autoincrement())
  name        String
  description String?
  slug        String
  weight      Int
  status      Boolean
  variants    ProductVariant[]
  category    Category?        @relation(fields: [categoryId], references: [id])
  categoryId  Int?
  user        User[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  slug     String    @default("_")
  display  Boolean   @default(false)
  imgUrl   String?
  status   Boolean   @default(true)
  products Product[]
}

model Order {
  id          Int         @id @default(autoincrement())
  note        String
  weight      Int
  total       Int
  deliveryFee Int
  address     Address     @relation(fields: [addressId], references: [id])
  addressId   Int
  user        User        @relation(fields: [userId], references: [id])
  userId      Int
  status      String
  orderItems  OrderItem[]
  payment     Payment?
  delivery    Delivery[]
  createdAt   DateTime    @default(now())
}

model OrderItem {
  id               Int            @id @default(autoincrement())
  note             String
  order            Order          @relation(fields: [orderId], references: [id])
  orderId          Int
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
  productVariantId Int
  quantity         Int
  total            Int
  delivery         Delivery?      @relation(fields: [deliveryId], references: [id])
  deliveryId       Int?
}

model Payment {
  id        Int    @id @default(autoincrement())
  depositId String
  name      String
  status    String
  method    String
  ref       String
  tel       String
  total     Int
  order     Order? @relation(fields: [orderId], references: [id])
  orderId   Int?   @unique
}

model Delivery {
  id               Int         @id @default(autoincrement())
  status           String
  trackingCode     String
  order            Order       @relation(fields: [orderId], references: [id])
  orderId          Int
  orderItem        OrderItem[]
  agent            Agent?      @relation(fields: [agentId], references: [id])
  priority         String
  agentId          Int?
  scheduledTime    DateTime
  deliveredTime    DateTime?
  estimatedArrival DateTime?
}

model Agent {
  id       Int        @id @default(autoincrement())
  code     String
  user     User       @relation(fields: [userId], references: [id])
  userId   Int        @unique
  status   String     @default("inactive")
  delivery Delivery[]
  max      Int        @default(5)
  zone     Zone[]
}

model Topic {
  id   Int    @id @default(autoincrement())
  name String
  faqs Faq[]
}

model Faq {
  id       Int    @id @default(autoincrement())
  question String
  answer   String
  topic    Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId  Int
}

model Setting {
  id      Int       @id @default(autoincrement())
  name    String
  content String?   @db.Text
  value   Int?
  note    String?
  section String
  date    DateTime?
}

model OperationLog {
  id           Int      @id @default(autoincrement())
  entity_type  String // e.g., 'User', 'Product', etc.
  entity_ids   String // e.g., '123' or comma-separated for multiple
  action       String // e.g., 'create', 'update', 'delete'
  performed_by String // user_id as string or 'system'
  timestamp    DateTime @default(now())
  ip_address   String?
  changes      Json?
  description  String?
}
