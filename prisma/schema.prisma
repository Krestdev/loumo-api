// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                      Int       @id @default(autoincrement())
  email                   String    @unique
  name                    String?
  password                String
  passwordResetOtp        String?
  passwordResetOtpExpires DateTime?
  tel                     String?

  verified               Boolean   @default(false)
  verificationOtp        String?
  verificationOtpExpires DateTime?

  active   Boolean @default(true)
  imageUrl String?

  role          Role?          @relation(fields: [roleId], references: [id])
  roleId        Int?
  addresses     Address[]
  notifications Notification[]
  logs          Log[]
  orders        Order[]
  agent         Agent?

  lastLogin DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Address {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  published   Boolean  @default(false)
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  zone        Zone?    @relation(fields: [zoneId], references: [id])
  zoneId      Int?
  shops       Shop[]
  orders      Order[]
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String
  permissions Permission[]
  user        User[]
}

model Permission {
  id     Int    @id @default(autoincrement())
  action String @unique
  roles  Role[]
}

model Log {
  id          Int       @id @default(autoincrement())
  action      String
  description String
  createdAt   DateTime? @default(now())
  user        User?     @relation(fields: [userId], references: [id])
  userId      Int?
}

model Notification {
  id          Int      @id @default(autoincrement())
  action      String
  description String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
}

model Zone {
  id        Int       @id @default(autoincrement())
  name      String
  price     Int
  addresses Address[]
}

model Shop {
  id             Int      @id @default(autoincrement())
  name           String
  address        Address? @relation(fields: [addressId], references: [id])
  addressId      Int?
  productVariant Stock[]
}

model Stock {
  id               Int            @id @default(autoincrement())
  quantity         Int
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
  productVariantId Int
  shop             Shop           @relation(fields: [shopId], references: [id])
  shopId           Int
  promotion        Promotion?     @relation(fields: [promotionId], references: [id])
  promotionId      Int?
}

model Promotion {
  id         Int      @id @default(autoincrement())
  code       String
  percentage Int
  expireAt   DateTime
  stock      Stock[]
}

model ProductVariant {
  id         Int         @id @default(autoincrement())
  name       String
  weight     Int
  status     Boolean
  price      Int         @default(0)
  product    Product     @relation(fields: [productId], references: [id])
  productId  Int
  orderItems OrderItem[]
  stock      Stock[]
}

model Product {
  id         Int              @id @default(autoincrement())
  name       String
  weight     Int
  status     Boolean
  variants   ProductVariant[]
  category   Category?        @relation(fields: [categoryId], references: [id])
  categoryId Int?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  weight   Int
  status   Boolean   @default(true)
  products Product[]
}

model Order {
  id         Int         @id @default(autoincrement())
  note       String
  address    Address     @relation(fields: [addressId], references: [id])
  addressId  Int         @unique
  user       User        @relation(fields: [userId], references: [id])
  userId     Int         @unique
  orderItems OrderItem[]
  payment    Payment[]
  delivery   Delivery[]
}

model OrderItem {
  id               Int            @id @default(autoincrement())
  note             String
  order            Order          @relation(fields: [orderId], references: [id])
  orderId          Int
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
  productVariantId Int
  quantity         Int
  total            Int
  delivery         Delivery?      @relation(fields: [deliveryId], references: [id])
  deliveryId       Int?
}

model Payment {
  id      Int    @id @default(autoincrement())
  name    String
  status  String
  ref     String
  total   Int
  order   Order  @relation(fields: [orderId], references: [id])
  orderId Int
}

model Delivery {
  id        Int         @id @default(autoincrement())
  status    String
  order     Order       @relation(fields: [orderId], references: [id])
  orderId   Int
  orderItem OrderItem[]
  agent     Agent?      @relation(fields: [agentId], references: [id])
  agentId   Int?
}

model Agent {
  id       Int        @id @default(autoincrement())
  code     String
  user     User       @relation(fields: [userId], references: [id])
  userId   Int        @unique
  delivery Delivery[]
}

model Topic {
  id   Int    @id @default(autoincrement())
  name String
  faqs Faq[]
}

model Faq {
  id       Int    @id @default(autoincrement())
  question String
  answer   String
  topic    Topic  @relation(fields: [topicId], references: [id])
  topicId  Int
}

model Setting {
  id      Int       @id @default(autoincrement())
  name    String
  content String?
  value   Int?
  note    String?
  section String
  date    DateTime?
}
